# -*- coding: utf-8 -*-
"""SIMULAR02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LJXYlWobc-_Wae6KFrrMUPx83mT-0xJO

INSTALAR PAQUETES NECESARIOS
"""

# Instala Conda en Colab
#!pip install -q condacolab
#import condacolab
#condacolab.install()

# Instalar las herramientas científicas con Conda (funciona perfecto)
#!conda install -c conda-forge rdkit py3dmol prolif openmm openmmforcefields -y

# Paso 1A: Actualizar paquetes e instalar AutoDock Vina
#!apt-get update
#!apt-get install -y autodock-vina

# Paso 1B: Descargar y descomprimir MGLTools
#!wget https://ccsb.scripps.edu/download/532/ -O mgltools.tar.gz
#!tar -xzf mgltools.tar.gz

# Paso 1C: Instalar py3Dmol para visualización 3D
#!pip install py3Dmol

#%cd mgltools_x86_64Linux2_1.5.7
#!bash install.sh

#%cd /content

"""IMPORTAR ARCHIVOS ndm1_prepared.pdb y oxa48_prepared.pdb"""

#from google.colab import files
#uploaded = files.upload()

# ✅ Solo instala Open Babel
#!apt-get install -y -qq openbabel

"""CREAR .pdb DE LOS ANTIBIOTICOS MODIFICADOS"""

from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem import rdmolfiles
import os

# Crear carpeta de salida si no existe
os.makedirs("ligandos_pdb", exist_ok=True)

# Tus SMILES modificados
ligandos = {
    "Meropenem_mod1": "CC1[C@H]2C(=O)N1C(=O)[C@H](NC(=O)C3=CN(C4CCCC4)S3)C(C)S2",
    "Meropenem_mod2": "FC1[C@H]2C(=O)N1C(=O)[C@H](NC(=O)C3=CN(C4=CC=CC=C4)S3)C(C)S2",
    "Imipenem_mod1": "C[C@H]1[C@@H](C(=O)N1C(=O)[C@H](NC(=O)C2=CSC=N2)C1CCCCC1)C(=O)O",
    "Imipenem_mod2": "CO[C@H]1[C@@H](C(=O)N1C(=O)[C@H](NC(=O)C2=CSC=N2)C(C)C)C(=O)O",
    "cVAE_1": "C1S[C@@H]2C(=O)N(C(=O)[C@@H]1NC(=O)c1cn(-c3ccccc3)s1)C2COONN",
    "cVAE_2": "S1S[C@@H]2C(=O)N(C(=O)[C@@H]1NC(=O)c1cn(-c3ccccc3)s1)C2COONN"
}

# Proceso de conversión
for nombre, smiles in ligandos.items():
    mol = Chem.MolFromSmiles(smiles)
    mol = Chem.AddHs(mol)  # Añadir hidrógenos explícitos
    AllChem.EmbedMolecule(mol, AllChem.ETKDG())  # Generar conformación 3D
    AllChem.UFFOptimizeMolecule(mol)  # Minimización con UFF

    pdb_path = f"{nombre}.pdb"
    writer = rdmolfiles.PDBWriter(pdb_path)
    writer.write(mol)
    writer.close()
    print(f"✅ {nombre}.pdb guardado")

"""VISUALIZAR ANTIBIOTICOS MODIFICADOS"""

import py3Dmol
import os

# Función para visualizar un archivo .pdb
def visualizar_pdb(pdb_path, width=400, height=300):
    with open(pdb_path, 'r') as f:
        pdb_data = f.read()

    viewer = py3Dmol.view(width=width, height=height)
    viewer.addModel(pdb_data, "pdb")
    viewer.setStyle({'stick': {}})
    viewer.setBackgroundColor('white')
    viewer.zoomTo()
    return viewer.show()

visualizar_pdb("Imipenem_mod1.pdb")

visualizar_pdb("Imipenem_mod2.pdb")

visualizar_pdb("Meropenem_mod1.pdb")

visualizar_pdb("Meropenem_mod2.pdb")

visualizar_pdb("cVAE_1.pdb")

visualizar_pdb("cVAE_2.pdb")

"""PREPARANDO ENZIMAS PARA SIMULACION"""

import os

#mgl_python = "/content/mgltools_x86_64Linux2_1.5.7/bin/pythonsh"
#scripts_path = "/content/mgltools_x86_64Linux2_1.5.7/MGLToolsPckgs/AutoDockTools/Utilities24"

# Preparación con salida detallada
def run_preparation(command):
    exit_code = os.system(command)
    print(f"Exit code: {exit_code}")

print("1. Preparando ndm1...")
run_preparation(f"{mgl_python} {scripts_path}/prepare_receptor4.py -r ndm1_prepared.pdb -o ndm1_prepared.pdbqt -A checkhydrogens")

print("2. Preparando oxa48...")
run_preparation(f"{mgl_python} {scripts_path}/prepare_receptor4.py -r oxa48_prepared.pdb -o oxa48_prepared.pdbqt -A hydrogens")

"""PREPARANDO ANTIBIOTICOS MODIFICADOS PARA SIMULACION"""

print("1. Preparando imipenem_mod1...")
run_preparation(f"{mgl_python} {scripts_path}/prepare_ligand4.py -l Imipenem_mod1.pdb -o imipenem_mod1.pdbqt -A checkhydrogens")

print("2. Preparando imipenem_mod2...")
run_preparation(f"{mgl_python} {scripts_path}/prepare_ligand4.py -l Imipenem_mod2.pdb -o imipenem_mod2.pdbqt -A checkhydrogens")

print("3. Preparando meropenem_mod1...")
run_preparation(f"{mgl_python} {scripts_path}/prepare_ligand4.py -l Meropenem_mod1.pdb -o meropenem_mod1.pdbqt -A checkhydrogens")

print("4. Preparando meropenem_mod2...")
run_preparation(f"{mgl_python} {scripts_path}/prepare_ligand4.py -l Meropenem_mod2.pdb -o meropenem_mod2.pdbqt -A checkhydrogens")

"""PREPARANDO ANTIBIOTICOS CVAE PARA LA SIMULACION"""

print("1. Preparando cVAE_1...")
run_preparation(f"{mgl_python} {scripts_path}/prepare_ligand4.py -l cVAE_1.pdb -o cVAE_1.pdbqt -A checkhydrogens")

print("2. Preparando cVAE_2...")
run_preparation(f"{mgl_python} {scripts_path}/prepare_ligand4.py -l cVAE_2.pdb -o cVAE_2.pdbqt -A checkhydrogens")

import os

os.makedirs("resultados", exist_ok=True)

"""SIMULAR LOS 4 ANTIBIOTICOS PROPUESTOS CON EL NBM-1"""

#!vina --receptor ndm1_prepared.pdbqt --ligand imipenem_mod1.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out resultados/ndm1_imipenem_mod1_docked.pdbqt > resultados/ndm1_imipenem_mod1_log.txt

#!vina --receptor ndm1_prepared.pdbqt --ligand imipenem_mod2.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out resultados/ndm1_imipenem_mod2_docked.pdbqt > resultados/ndm1_imipenem_mod2_log.txt

#!vina --receptor ndm1_prepared.pdbqt --ligand meropenem_mod1.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out resultados/ndm1_meropenem_mod1_docked.pdbqt > resultados/ndm1_meropenem_mod1_log.txt

#!vina --receptor ndm1_prepared.pdbqt --ligand meropenem_mod2.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out resultados/ndm1_meropenem_mod2_docked.pdbqt > resultados/ndm1_meropenem_mod2_log.txt

"""SIMULAR 4 ANTIBIOTICOS PROPUESTOS CON EL OXA48"""

#!vina --receptor oxa48_prepared.pdbqt --ligand imipenem_mod1.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out resultados/oxa48_imipenem_mod1_docked.pdbqt > resultados/oxa48_imipenem_mod1_log.txt

#!vina --receptor oxa48_prepared.pdbqt --ligand imipenem_mod2.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out resultados/oxa48_imipenem_mod2_docked.pdbqt > resultados/oxa48_imipenem_mod2_log.txt

#!vina --receptor oxa48_prepared.pdbqt --ligand meropenem_mod1.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out resultados/oxa48_meropenem_mod1_docked.pdbqt > resultados/oxa48_meropenem_mod1_log.txt

#!vina --receptor oxa48_prepared.pdbqt --ligand meropenem_mod2.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out resultados/oxa48_meropenem_mod2_docked.pdbqt > resultados/oxa48_meropenem_mod2_log.txt

"""SIMULAR LOS CVAE CON EL NDM1 Y OXA48"""

#!vina --receptor ndm1_prepared.pdbqt --ligand cVAE_1.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out resultados/ndm1_cVAE_1_docked.pdbqt > resultados/ndm1_cVAE_1_log.txt

#!vina --receptor ndm1_prepared.pdbqt --ligand cVAE_2.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out resultados/ndm1_cVAE_2_docked.pdbqt > resultados/ndm1_cVAE_2_log.txt

#!vina --receptor oxa48_prepared.pdbqt --ligand cVAE_1.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out resultados/oxa48_cVAE_1_docked.pdbqt > resultados/oxa48_cVAE_1_log.txt

#!vina --receptor oxa48_prepared.pdbqt --ligand cVAE_2.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out resultados/oxa48_cVAE_2_docked.pdbqt > resultados/oxa48_cVAE_2_log.txt

"""MOSTRAR RESULTADOS"""

def extraer_afinidad_vina(log_path):
    with open(log_path) as f:
        lines = f.readlines()

    for line in lines:
        if line.strip().startswith("1"):
            partes = line.split()
            if len(partes) >= 2:
                afinidad = float(partes[1])
                return afinidad
    return None

import os
import subprocess

# Ruta a la carpeta con los archivos .pdbqt
carpeta = "resultados"  # Reemplaza esto

# Asegúrate de que la ruta es absoluta
carpeta = os.path.abspath(carpeta)

# Recorre todos los archivos .pdbqt
for archivo in os.listdir(carpeta):
    if archivo.endswith(".pdbqt"):
        entrada = os.path.join(carpeta, archivo)
        salida = os.path.join(carpeta, archivo.replace(".pdbqt", ".pdb"))

        # Comando de conversión con Open Babel
        comando = ["obabel", "-ipdbqt", entrada, "-opdb", "-O", salida]

        # Ejecutar conversión
        resultado = subprocess.run(comando, capture_output=True, text=True)

        if resultado.returncode == 0:
            print(f"Convertido: {archivo} → {os.path.basename(salida)}")
        else:
            print(f"❌ Error al convertir {archivo}:\n{resultado.stderr}")

# Carga del modelo
with open("resultados/oxa48_cVAE_2_docked.pdb") as f:
    pdb_data = f.read()

view = py3Dmol.view(width=600, height=500)
view.addModel(pdb_data, 'pdb')

# Estilo para la proteína
view.setStyle({'chain': 'A'}, {'cartoon': {'color': 'lightgray'}})

# Superficie semitransparente de la proteína
view.addSurface(py3Dmol.VDW, {'opacity': 0.3, 'color': 'lightblue'}, {'chain': 'A'})

# Estilo de ligando: bolitas y palos realista (ball-and-stick)
# Ajustamos radio y colores con 'stick' y 'sphere'
view.addStyle({'resn': 'UNL'}, {
    'stick': {'radius': 0.05, 'colorscheme': 'greenCarbon'},
    'sphere': {'radius': 0.2}
})

view.zoomTo()
view.show()

import glob

logs = glob.glob("resultados/*_log.txt")
for log_path in logs:
    nombre = os.path.basename(log_path).replace("_log.txt", "")
    afinidad = extraer_afinidad_vina(log_path)
    if afinidad is not None:
        print(f"{nombre}: {afinidad} kcal/mol")
    else:
        print(f"{nombre}: ❌ No se pudo extraer afinidad")

"""GENERAR RESULTADOS DE AFINIDADES EN .csv Y .xlsx"""

import os
import glob
import pandas as pd

# Crear carpeta para guardar los resultados
output_dir = "resultados_procesados"
os.makedirs(output_dir, exist_ok=True)

# Función para extraer la afinidad desde el log
def extraer_afinidad_vina(log_path):
    with open(log_path) as f:
        lines = f.readlines()

    for line in lines:
        if line.strip().startswith("1"):
            partes = line.split()
            if len(partes) >= 2:
                try:
                    return float(partes[1])
                except ValueError:
                    return None
    return None

# Procesar todos los archivos *_log.txt
resultados = []

for log_path in glob.glob("resultados/*_log.txt"):
    nombre_archivo = os.path.basename(log_path).replace("_log.txt", "")

    # Separar receptor y ligando por el primer guión bajo
    try:
        receptor, ligando = nombre_archivo.split("_", 1)
    except ValueError:
        receptor = "Desconocido"
        ligando = nombre_archivo

    afinidad = extraer_afinidad_vina(log_path)
    resultados.append({
        "Receptor": receptor,
        "Ligando": ligando,
        "Afinidad (kcal/mol)": afinidad
    })

# Crear el DataFrame
df = pd.DataFrame(resultados)

# Guardar CSV y Excel
csv_path = os.path.join(output_dir, "afinidades_docking.csv")
excel_path = os.path.join(output_dir, "afinidades_docking.xlsx")

df.to_csv(csv_path, index=False)
df.to_excel(excel_path, index=False)

print(f"✅ Archivo CSV guardado en: {csv_path}")
print(f"✅ Archivo Excel guardado en: {excel_path}")

"""GRAFICAR AFINIDADES"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Cargar el archivo
df = pd.read_csv("resultados_procesados/afinidades_docking.csv")

# Crear la figura
sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))

# Graficar
sns.barplot(
    data=df,
    x="Ligando",
    y="Afinidad (kcal/mol)",
    hue="Receptor",
    palette="muted"
)

# Personalizar
plt.title("Afinidad de docking por ligando y receptor")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.axhline(0, color='gray', linewidth=0.8)
plt.ylabel("Afinidad (kcal/mol)")
plt.xlabel("Ligando")
plt.legend(title="Receptor")

# Guardar como PNG
plt.savefig("resultados_procesados/afinidades_docking.png", dpi=300)
plt.show()