# -*- coding: utf-8 -*-
"""SIMULAR01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mToSoANR1326JZgV8xRWNkrbKtKMCip9

PASO 1: INSTALAR TODO LO REQUERIDO
"""

# Paso 1A: Actualizar paquetes e instalar AutoDock Vina
#!apt-get update
#!apt-get install -y autodock-vina

# Paso 1B: Descargar y descomprimir MGLTools
#!wget https://ccsb.scripps.edu/download/532/ -O mgltools.tar.gz
#!tar -xzf mgltools.tar.gz

# Paso 1C: Instalar py3Dmol para visualización 3D
#!pip install py3Dmol

#%cd mgltools_x86_64Linux2_1.5.7
#!bash install.sh

#!ls bin

#%cd /content

"""PASO 2: SUBIR ARCHIVOS .pdb (imipenem.pdb; meropenem.pdb; ndm1_prepared.pdb; oxa48_prepared.pdb)"""

#from google.colab import files
#uploaded = files.upload()

"""PASO 3: CONVERTIR .pdb A .pdbqt"""

import os

#mgl_python = "/content/mgltools_x86_64Linux2_1.5.7/bin/pythonsh"
#scripts_path = "/content/mgltools_x86_64Linux2_1.5.7/MGLToolsPckgs/AutoDockTools/Utilities24"

# Preparación con salida detallada
def run_preparation(command):
    exit_code = os.system(command)
    print(f"Exit code: {exit_code}")

print("1. Preparando ndm1...")
run_preparation(f"{mgl_python} {scripts_path}/prepare_receptor4.py -r ndm1_prepared.pdb -o ndm1_prepared.pdbqt -A hydrogens")

print("2. Preparando imipenem...")
run_preparation(f"{mgl_python} {scripts_path}/prepare_ligand4.py -l imipenem.pdb -o imipenem.pdbqt -A hydrogens")

print("3. Preparando meropenem...")
run_preparation(f"{mgl_python} {scripts_path}/prepare_ligand4.py -l meropenem.pdb -o meropenem.pdbqt -A hydrogens")

print("4. Preparando oxa48...")
run_preparation(f"{mgl_python} {scripts_path}/prepare_receptor4.py -r oxa48_prepared.pdb -o oxa48_prepared.pdbqt -A hydrogens")

run_preparation(f"{mgl_python} {scripts_path}/prepare_receptor4.py -r ndm1_prepared.pdb -o ndm1_prepared.pdbqt -A checkhydrogens")

"""PASO 4: REALIZAR LA SIMULACION CON VINA"""

#!vina --receptor ndm1_prepared.pdbqt --ligand imipenem.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out ndm1_imipenem_docked.pdbqt > ndm1_imipenem_log.txt

#!vina --receptor ndm1_prepared.pdbqt --ligand meropenem.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out ndm1_meropenem_docked.pdbqt > ndm1_meropenem_log.txt

#!vina --receptor oxa48_prepared.pdbqt --ligand imipenem.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out oxa48_imipenem_docked.pdbqt > oxa48_imipenem_log.txt

#!vina --receptor oxa48_prepared.pdbqt --ligand meropenem.pdbqt \
     # --center_x 10 --center_y 10 --center_z 10 \
     # --size_x 20 --size_y 20 --size_z 20 \
     # --exhaustiveness 8 \
     # --out oxa48_meropenem_docked.pdbqt > oxa48_meropenem_log.txt

"""PASO 5: VER AFINIDADES"""

import glob

# Busca todos los archivos de log
log_files = sorted(glob.glob("*_log.txt"))

# Imprime afinidades
for log in log_files:
    with open(log) as f:
        lines = f.readlines()
        for line in lines:
            if line.strip().startswith("1"):
                parts = line.split()
                score = parts[1]
                print(f"{log}: {score} kcal/mol")
                break

"""PASO 6: CONVERTIR RESULTADOS .pdbqt A .pdb"""

def pdbqt_to_pdb(pdbqt_file, pdb_file):
    with open(pdbqt_file) as f_in, open(pdb_file, 'w') as f_out:
        for line in f_in:
            if line.startswith("ATOM") or line.startswith("HETATM"):
                line = line[:66] + "  0.00  0.00          \n"  # Ajuste de formato simple
                f_out.write(line)

# Convierte el complejo ndm1_imipenem
pdbqt_to_pdb("ndm1_imipenem_docked.pdbqt", "ndm1_imipenem_docked.pdb")
pdbqt_to_pdb("ndm1_meropenem_docked.pdbqt", "ndm1_meropenem_docked.pdb")
pdbqt_to_pdb("oxa48_imipenem_docked.pdbqt", "oxa48_imipenem_docked.pdb")
pdbqt_to_pdb("oxa48_meropenem_docked.pdbqt", "oxa48_meropenem_docked.pdb")

"""PASO 7: VER RESULTADOS 3D"""

import py3Dmol

# Carga del modelo
with open("ndm1_imipenem_docked.pdb") as f:
    pdb_data = f.read()

view = py3Dmol.view(width=600, height=500)
view.addModel(pdb_data, 'pdb')

# Estilo para la proteína
view.setStyle({'chain': 'A'}, {'cartoon': {'color': 'lightgray'}})

# Superficie semitransparente de la proteína
view.addSurface(py3Dmol.VDW, {'opacity': 0.3, 'color': 'lightblue'}, {'chain': 'A'})

# Estilo de ligando: bolitas y palos realista (ball-and-stick)
# Ajustamos radio y colores con 'stick' y 'sphere'
view.addStyle({'resn': 'UNL'}, {
    'stick': {'radius': 0.05, 'colorscheme': 'greenCarbon'},
    'sphere': {'radius': 0.2}
})

view.zoomTo()
view.show()

# Carga del modelo
with open("ndm1_meropenem_docked.pdb") as f:
    pdb_data = f.read()

view = py3Dmol.view(width=600, height=500)
view.addModel(pdb_data, 'pdb')

# Estilo para la proteína
view.setStyle({'chain': 'A'}, {'cartoon': {'color': 'lightgray'}})

# Superficie semitransparente de la proteína
view.addSurface(py3Dmol.VDW, {'opacity': 0.3, 'color': 'lightblue'}, {'chain': 'A'})

# Estilo de ligando: bolitas y palos realista (ball-and-stick)
# Ajustamos radio y colores con 'stick' y 'sphere'
view.addStyle({'resn': 'UNL'}, {
    'stick': {'radius': 0.05, 'colorscheme': 'greenCarbon'},
    'sphere': {'radius': 0.2}
})

view.zoomTo()
view.show()

# Carga del modelo
with open("oxa48_imipenem_docked.pdb") as f:
    pdb_data = f.read()

view = py3Dmol.view(width=600, height=500)
view.addModel(pdb_data, 'pdb')

# Estilo para la proteína
view.setStyle({'chain': 'A'}, {'cartoon': {'color': 'lightgray'}})

# Superficie semitransparente de la proteína
view.addSurface(py3Dmol.VDW, {'opacity': 0.3, 'color': 'lightblue'}, {'chain': 'A'})

# Estilo de ligando: bolitas y palos realista (ball-and-stick)
# Ajustamos radio y colores con 'stick' y 'sphere'
view.addStyle({'resn': 'UNL'}, {
    'stick': {'radius': 0.05, 'colorscheme': 'greenCarbon'},
    'sphere': {'radius': 0.2}
})

view.zoomTo()
view.show()

# Carga del modelo
with open("oxa48_meropenem_docked.pdb") as f:
    pdb_data = f.read()

view = py3Dmol.view(width=600, height=500)
view.addModel(pdb_data, 'pdb')

# Estilo para la proteína
view.setStyle({'chain': 'A'}, {'cartoon': {'color': 'lightgray'}})

# Superficie semitransparente de la proteína
view.addSurface(py3Dmol.VDW, {'opacity': 0.3, 'color': 'lightblue'}, {'chain': 'A'})

# Estilo de ligando: bolitas y palos realista (ball-and-stick)
# Ajustamos radio y colores con 'stick' y 'sphere'
view.addStyle({'resn': 'UNL'}, {
    'stick': {'radius': 0.05, 'colorscheme': 'greenCarbon'},
    'sphere': {'radius': 0.2}
})

view.zoomTo()
view.show()

"""PASO 8: INSTALAR PAQUETES NECESARIOS PARA CONTINUAR"""

#!pip install biopython openpyxl pandas

"""PASO 9: VER RESULTADOS DETALLADOS"""

import os
import re
import pandas as pd
from Bio.PDB import PDBParser
import numpy as np

# Define tus archivos de docking
dockings = [
    ("ndm1", "imipenem"),
    ("ndm1", "meropenem"),
    ("oxa48", "imipenem"),
    ("oxa48", "meropenem"),
]

results = []

def extract_affinity(pdbqt_file):
    with open(pdbqt_file, 'r') as file:
        for line in file:
            if line.startswith("REMARK VINA RESULT"):
                parts = line.split()
                return float(parts[3])  # la energía de unión
    return None

def center_of_mass(pdbqt_file):
    coords = []
    with open(pdbqt_file, 'r') as file:
        for line in file:
            if line.startswith("ATOM") or line.startswith("HETATM"):
                x = float(line[30:38])
                y = float(line[38:46])
                z = float(line[46:54])
                coords.append([x, y, z])
    if coords:
        com = np.mean(coords, axis=0)
        return tuple(np.round(com, 3))
    return (None, None, None)

# Analiza todos los complejos
for protein, ligand in dockings:
    fname = f"{protein}_{ligand}_docked.pdbqt"
    if os.path.exists(fname):
        affinity = extract_affinity(fname)
        com = center_of_mass(fname)
        results.append({
            "Proteína": protein.upper(),
            "Ligando": ligand.capitalize(),
            "Afinidad (kcal/mol)": affinity,
            "Centro de masa (x,y,z)": com
        })
    else:
        results.append({
            "Proteína": protein.upper(),
            "Ligando": ligand.capitalize(),
            "Afinidad (kcal/mol)": "Archivo no encontrado",
            "Centro de masa (x,y,z)": "-"
        })

# Mostrar tabla resumen
df = pd.DataFrame(results)
df_sorted = df.sort_values(by="Afinidad (kcal/mol)", ascending=True)
df_sorted.reset_index(drop=True, inplace=True)

df_sorted

"""PASO 10: GUARDAR RESULTADOS EN .csv Y EN .xlsx"""

import os
from Bio.PDB import PDBParser
import pandas as pd

# Nombres de archivos de salida de docking
docking_results = {
    "NDM-1 + Imipenem": "ndm1_imipenem_docked.pdbqt",
    "NDM-1 + Meropenem": "ndm1_meropenem_docked.pdbqt",
    "OXA-48 + Imipenem": "oxa48_imipenem_docked.pdbqt",
    "OXA-48 + Meropenem": "oxa48_meropenem_docked.pdbqt"
}

# Lista para almacenar resultados
results = []

# Función para extraer afinidades desde un archivo .pdbqt
def extract_affinities(pdbqt_file):
    affinities = []
    with open(pdbqt_file, "r") as file:
        for line in file:
            if line.startswith("REMARK VINA RESULT:"):
                parts = line.strip().split()
                affinity = float(parts[3])  # kcal/mol
                affinities.append(affinity)
    return affinities

# Procesar cada archivo
for complex_name, filename in docking_results.items():
    if os.path.exists(filename):
        affinities = extract_affinities(filename)
        for i, score in enumerate(affinities):
            results.append({
                "Complejo": complex_name,
                "Modo": i + 1,
                "Energía de Unión (kcal/mol)": score
            })
    else:
        print(f"⚠️ No se encontró el archivo: {filename}")

# Crear DataFrame
df = pd.DataFrame(results)

# Guardar en CSV y Excel
df.to_csv("resultados_docking.csv", index=False)
df.to_excel("resultados_docking.xlsx", index=False)

# Mostrar los resultados
print(df.to_string(index=False))

"""PASO 11: GENERAR GRAFICO DE RESULTADOS"""

import pandas as pd
import matplotlib.pyplot as plt

# Cargar resultados desde CSV
df = pd.read_csv("resultados_docking.csv")

# Agrupar por complejo y quedarnos con el mejor modo (menor energía)
df_best = df.sort_values("Energía de Unión (kcal/mol)").groupby("Complejo").first().reset_index()

# Gráfico de barras
plt.figure(figsize=(10, 6))
bars = plt.bar(df_best["Complejo"], df_best["Energía de Unión (kcal/mol)"], color='skyblue')
plt.title("Mejor Energía de Unión por Complejo", fontsize=14)
plt.ylabel("Energía de Unión (kcal/mol)")
plt.xticks(rotation=45, ha='right')

# Mostrar los valores sobre las barras
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2.0, yval - 0.3, f'{yval:.2f}', ha='center', va='top', fontsize=10)

plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.6)

# Guardar como imagen
plt.savefig("grafico_energia_union.png", dpi=300)
plt.show()